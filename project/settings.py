"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import logging



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4q(u9x15t#(do3ysf-prd5^5cje332fqwjy94g734j4bne*o$1'  # {{secret_key}}

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'modeltranslation',  # обязательно перед админом

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',  # контроль сессий
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',

    'news.apps.NewsConfig',
    'django_filters',
    'bootstrapform',
    "debug_toolbar",

    #  allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    # scheduler
    'django_apscheduler',

    'rest_framework',
]

DEFAULT_FROM_EMAIL = ''
SITE_ID = 1

LANGUAGE_CODE = 'ru'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    'django.middleware.locale.LocaleMiddleware',

    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    "debug_toolbar.middleware.DebugToolbarMiddleware",

    'news.middlewares.TimezoneMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',

                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/index/'

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

'''
for PostgreSQL

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # путь импорта специального модуля Django
        'NAME': 'postgres',  # имя базы данных
        'USER': 'postgres',  # имя пользователя БД
        'PASSWORD': '',  # пароль пользователя БД
        'HOST': 'localhost',  # сетевой адрес БД
        'PORT': '5432',  # порт БД
    },
}

'''
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

#  LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True   # интернационализация будет поддерживаться

USE_TZ = True

#  для локализации
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

INTERNAL_IPS = [
    "127.0.0.1",
]

#  email
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 465
EMAIL_HOST_USER = 'razumovskijigor6@gmail.com'  # !!! переменные окружения
EMAIL_HOST_PASSWORD = 'odwcmdjkvuhngmkx'  # !!!
EMAIL_USE_SSL = True
EMAIL_USE_TLS = False
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

#  redis
REDIS_HOST = '127.0.0.1'  # NOT 0.0.0.0 with docker
REDIS_PORT = '6379'

#  celery
CELERY_BROKER_URL = 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/0'  # URL брокера сообщений
CELERY_BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}  #
CELERY_RESULT_BACKEND = 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/0'  # хранилище результатов выполнения задач
CELERY_ACCEPT_CONTENT = ['application/json']  # допустимый формат данных
CELERY_TASK_SERIALIZER = 'json'  # метод сериализации задач
CELERY_RESULT_SERIALIZER = 'json'  # метод сериализации результатов

# registration with email
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = "mandatory"  # 'none'
ACCOUNT_CONFIRM_EMAIL_ON_GET = True


ACCOUNT_FORMS = {'signup': 'news.models.BasicSignupForm'}

#  cache
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': BASE_DIR / 'django_cache',
    }
}

# scheduler
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25

#  logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters":
        {
            "my_format":
                {
                    "format": "{asctime}, {levelname}, {message}",
                    "style": "{"
                },
            "warning_format":
                {
                    "format": "{asctime}, {levelname}, {message}, {pathname}",
                    "style": "{"
                },
            "info_format":
                {
                    "format": "{asctime}, {levelname}, {module}, {message}",
                    "style": "{"
                },
            "error_format":
                {
                    "format": "{asctime}, {levelname}, {message}, {pathname}",
                    "style": "{"
                },
            "security_format":
                {
                    "format": "{asctime}, {levelname}, {module},{message}",
                    "style": "{"
                },
            "mail_format":
                {
                    "format": "{asctime}, {levelname}, {module}, {message}",
                    "style": "{"
                },
        },

    "handlers":
        {
            "debug_handler": {
                "class": "logging.StreamHandler",
                "formatter": "my_format"
            },
            "warning_handler":
                {
                    "level": "WARNING",
                    "class": "logging.StreamHandler",
                    "formatter": "warning_format"
                },
            "info_handler":
                {
                    "level": "INFO",
                    "class": "logging.FileHandler",
                    "filename": "logs/general.log",
                    "formatter": "info_format"
                },
            "error_handler":
                {
                    "level": "ERROR",
                    "class": "logging.FileHandler",
                    "filename": "logs/errors.log",
                    "formatter": "error_format"
                },
            "security_handler":
                {
                    "level": "ERROR",
                    "class": "logging.FileHandler",
                    "filename": "logs/security.log",
                    "formatter": "security_format"
                },
            "mail_handler":
                {
                    "level": "ERROR",
                    "class": "django.utils.log.AdminEmailHandler",
                    "include_html": True,
                    "formatter": "mail_format"
                },
        },

    "filters":
        {
            "required":
                {
                    "()": "django.utils.log.RequireDebugTrue",
                },
            "un_required":
                {
                    "()": "django.utils.log.RequireDebugFalse",
                }
        },

    "loggers":
        {
            "news": {
                "handlers": ["debug_handler", "warning_handler", "info_handler"],
                "filters": ["required"],
                "level": os.getenv("DJANGO_LOG_LEVEL", "DEBUG"),
                "propagate": True,
                },
            "django":
                {
                    "filters": ["required"],
                    "handlers": ["debug_handler", "warning_handler", "mail_handler"],
                    "level": os.getenv("DJANGO_LOG_LEVEL", "ERROR"),
                    "propagate": True,
                },
            "django.server":
                {
                    "filters": ["required"],
                    "handlers": ["error_handler"],
                    "level": os.getenv("DJANGO_LOG_LEVEL", "ERROR"),
                    "propagate": True,
                },
            "django.template":
                {
                    "filters": ["required"],
                    "handlers": ["error_handler"],
                    "level": os.getenv("DJANGO_LOG_LEVEL", "ERROR"),
                    "propagate": True,
                },
            "django.db.backends":
                {
                    "filters": ["required"],
                    "handlers": ["error_handler"],
                    "level": os.getenv("DJANGO_LOG_LEVEL", "ERROR"),
                    "propagate": True,
                },
            "django.security":
                {
                    "filters": ["required"],
                    "handlers": ["security_handler"],
                    "propagate": True,
                },
            "django.request":
                {
                    "filters": ["un_required"],
                    "handlers": ["mail_handler", "error_handler"],
                    "level": os.getenv("DJANGO_LOG_LEVEL", "ERROR"),
                    "propagate": True,
                },
        },
}

LANGUAGES = [
    ('en', 'English'),
    ('ru', 'Русский')
]
